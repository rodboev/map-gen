{"version":3,"sources":["lib/utils.js","components/TileLayer.js","lib/api.js","components/ZipcodeLayer.js","components/LeadsLayer.js","components/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["apiKey","provider","MapBoxProvider","params","access_token","geosearch","query","a","search","String","result","length","y","x","formatPhoneNumber","str","match","replace","TileLayer","map","useMap","useEffect","L","maxZoom","minZoom","attribution","id","tileSize","zoomOffset","addTo","store","localforage","createInstance","driver","INDEXEDDB","LOCALSTORAGE","memoryDriver","_driver","name","cache","setupCache","maxAge","api","axios","create","adapter","ZipcodeLayer","setLocation","setZoom","useState","data","setData","get","geojson","console","log","GeoJSON","onEachFeature","feature","layer","popupContent","properties","toUpperCase","bindPopup","on","lat","parseFloat","latitude","lng","longitude","setView","style","fillColor","weight","opacity","color","dashArray","fillOpacity","actionHandlers","leads","action","payload","i","findIndex","item","lead","position","newLeads","splice","filter","reducer","state","type","LeadsLayer","useReducer","dispatch","slice","forEach","phone","company","first_name","last_name","join","address1","address","address2","city","Boolean","zip","notes","date","loading","queueGeosearch","Marker","eventHandlers","click","Popup","StyledButton","styled","button","Button","children","boros","currentBoros","setCurrentBoros","selected","setSelected","className","onClick","isSelected","concat","currentBoro","Filter","boro","App","MapContainer","center","zoom","zoomControl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3d50099.chunk.js","sourcesContent":["import { MapBoxProvider } from 'leaflet-geosearch';\r\n\r\nconst apiKey = 'pk.eyJ1Ijoicm9kYm9ldiIsImEiOiJja3NncXVnMzgxbXVwMnNvbTdwMTNsdzI0In0.6n8Lu9s1o4JwyPJmMcHsNg';\r\n\r\nconst provider = new MapBoxProvider({\r\n  params: {\r\n    access_token: apiKey,\r\n  },\r\n});\r\n\r\nconst geosearch = async (query) => {\r\n  try {\r\n    const result = await provider.search({query: String(query) });\r\n    if (result.length > 0) {\r\n      return [result[0].y, result[0].x];\r\n    }\r\n  }\r\n  catch (err) {\r\n    return err;\r\n  }\r\n}\r\n\r\nconst formatPhoneNumber = str => {\r\n  const cleaned = String(str).replace(/\\D/g, '');\r\n  const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\r\n  return match ? `(${match[1]}) ${match[2]}-${match[3]}` : null;\r\n}\r\n\r\nexport { geosearch, formatPhoneNumber, apiKey };","import L from 'leaflet';\r\nimport { useEffect } from 'react';\r\nimport { useMap } from 'react-leaflet';\r\nimport { apiKey } from '../lib/utils'\r\n\r\nconst TileLayer = () => {\r\n    // Built-in <TileLayer /> doesn't properly handle zoomOffset\r\n    const map = useMap();\r\n    \r\n    useEffect(() => {\r\n      new L.TileLayer(\r\n        `https://api.mapbox.com/styles/v1/mapbox/streets-v11/tiles/{z}/{x}/{y}?access_token=${apiKey}`,\r\n        {\r\n          maxZoom: 17,\r\n          minZoom: 9,\r\n          attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n          id: 'mapbox/streets-v11',\r\n          tileSize: 512,\r\n          zoomOffset: -1,\r\n        }\r\n      ).addTo(map);\r\n    }, [map]);\r\n  \r\n    return null\r\n  }\r\n\r\n  export default TileLayer;","import localforage from 'localforage'\r\nimport memoryDriver from 'localforage-memoryStorageDriver'\r\nimport axios from 'axios'\r\nimport { setupCache } from 'axios-cache-adapter'\r\n\r\nconst store = localforage.createInstance({\r\n  driver: [\r\n    localforage.INDEXEDDB,\r\n    localforage.LOCALSTORAGE,\r\n    memoryDriver._driver\r\n  ],\r\n  name: 'map-gen-cache'\r\n});\r\n\r\nconst cache = setupCache({\r\n  // maxAge: 60 * 60 * 1000,\r\n  maxAge: 0,\r\n  store\r\n});\r\n\r\nconst api = axios.create({\r\n  adapter: cache.adapter\r\n});\r\n\r\nexport { api as default, cache };","import { useState, useEffect } from \"react\";\r\nimport { useMap, GeoJSON } from \"react-leaflet\";\r\nimport api, { cache } from '../lib/api';\r\n\r\nconst zoomTo = 12;\r\n\r\nconst ZipcodeLayer = ({ setLocation, setZoom }) => {\r\n  const [data, setData] = useState(null);\r\n  const map = useMap();\r\n\r\n  const setFeatureStyle = () => ({\r\n    fillColor: 'lightblue',\r\n    weight: 2,\r\n    opacity: 1,\r\n    color: 'white',\r\n    dashArray: '3',\r\n    fillOpacity: 0.6\r\n  });\r\n\r\n  const onEachFeature = (feature, layer) => {\r\n    let popupContent = '';\r\n    if (feature.properties) {\r\n      popupContent += `${feature.properties['PO_NAME']}, ${feature.properties['STATE']} ${feature.properties['postalCode']}`.toUpperCase();\r\n    }\r\n    layer.bindPopup(popupContent);\r\n\r\n    layer.on('click', () => {\r\n      const lat = parseFloat(feature.properties.latitude);\r\n      const lng = parseFloat(feature.properties.longitude);\r\n      map.setView([lat, lng], zoomTo);\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const geojson = await api.get('/data/beta_nyc-zip-code-tabulation-areas-polygons.min.geojson');\r\n      setData(geojson.data);\r\n      const length = await cache.store.length();\r\n      console.log('Cache store length:', length);\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    data &&\r\n      <GeoJSON\r\n        data={data}\r\n        onEachFeature={onEachFeature}\r\n        style={setFeatureStyle}\r\n      />\r\n  );\r\n}\r\n  \r\nexport default ZipcodeLayer;\r\n","import { useEffect, useReducer } from \"react\";\r\nimport api from 'axios';\r\nimport { v4 as id } from 'uuid';\r\nimport { geosearch, formatPhoneNumber } from '../lib/utils';\r\nimport { useMap, Marker, Popup } from \"react-leaflet\";\r\n\r\nconst maxPins = 50;\r\nconst zoomTo = 13;\r\n\r\nconst actionHandlers = {\r\n  'ADD_LEAD': (leads, action) => {\r\n    return [ ...leads, action.payload ]\r\n  },\r\n  'UPDATE_LEAD': (leads, action) => {\r\n    const i = leads.findIndex(item => item.id === action.payload.id);\r\n    const lead = {\r\n      ...leads[i], position: action.payload.position\r\n    };\r\n    const newLeads = [...leads];\r\n    newLeads.splice(i, 1, lead);\r\n    return newLeads;\r\n  },\r\n  'DELETE_LEAD': (leads, action) => {\r\n    return leads.filter(lead => lead.id !== action.payload.id)\r\n  }\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  return actionHandlers[action.type]\r\n    ? actionHandlers[action.type](state, action)\r\n    : state;\r\n}\r\n\r\nconst LeadsLayer = () => {\r\n  const [leads, dispatch] = useReducer(reducer, [])\r\n\r\n  useEffect(() => {\r\n    // On load, get leads from lead-gen API\r\n    (async () => {\r\n      const response = await api.get('https://lead-gen-lite.herokuapp.com/api/all-with-contacts.json');\r\n      \r\n      response.data.slice(0, maxPins).forEach(lead => {\r\n        const phone = formatPhoneNumber(lead.phone);\r\n\r\n        dispatch({\r\n          type: 'ADD_LEAD',\r\n          payload: {\r\n            id: id(),\r\n            company: lead.company,\r\n            name: [lead.first_name, lead.last_name].join(' '),\r\n            address1: lead.address,\r\n            address2:\r\n              [\r\n                [lead.city, lead.state].filter(Boolean).join(', '),\r\n                lead.zip\r\n              ].filter(Boolean).join(' '),\r\n            phone,\r\n            notes: [lead.date, lead.notes].filter(Boolean).join(': '),\r\n            position: [],\r\n            loading: false,\r\n          }\r\n        });\r\n      });\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update position when lead shows up\r\n    (async () => {\r\n      const leadsToUpdate = leads.filter(lead => lead.position && lead.position.length === 0 && !lead.loading)\r\n\r\n      leadsToUpdate.forEach(async (lead) => {\r\n        const queueGeosearch = async () => {\r\n          const query = [lead.address1, lead.address2].join(' ');\r\n          lead.loading = true;\r\n          const result = await geosearch(query)\r\n          lead.loading = false;\r\n          return result;\r\n        }\r\n\r\n        dispatch({\r\n          type: 'UPDATE_LEAD',\r\n          payload: {\r\n            id: lead.id,\r\n            position: await queueGeosearch(),\r\n          }\r\n        });\r\n      });\r\n    })();\r\n  }, [leads]);\r\n\r\n  const map = useMap();\r\n\r\n  return leads.map(lead =>\r\n    lead.position && lead.position.length > 0 &&\r\n      <Marker\r\n        position={lead.position}\r\n        eventHandlers={{\r\n          click: () => {\r\n            map.setView(lead.position, zoomTo);\r\n          },\r\n        }}\r\n        key={lead.id}>\r\n        <Popup>\r\n          <div>{lead.name}</div>\r\n          <div>{lead.company}</div>\r\n          <div>{lead.address1}</div>\r\n          <div>{lead.address2}</div>\r\n          <div>{lead.phone}</div>\r\n          <p>{lead.notes}</p>\r\n        </Popup>\r\n      </Marker>\r\n  );\r\n}\r\n\r\nexport default LeadsLayer;","import { useState } from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst StyledButton = styled.button`\r\n  border: 2px solid #3376d2;\r\n\tborder-radius: 3px;\r\n\tcursor: pointer;\r\n\tfont-size: 80%;\r\n\tpadding: 0 20pt;\r\n\tbackground: white;\r\n\tcolor: #3376d2;\r\n  height: 22pt;\r\n  margin: 0.25em;\r\n  &:hover {\r\n    color: white;\r\n    background-color: rgba(0, 109, 235, 0.75);\r\n    border-color: transparent;\r\n  }\r\n  &.selected, &.selected:hover {\r\n    color: white;\r\n    background-color: rgba(0, 109, 235);\r\n  }\r\n`\r\n\r\nconst Button = ({children, boros, currentBoros, setCurrentBoros}) => {\r\n  const [selected, setSelected] = useState(false);\r\n\r\n  return (\r\n    <StyledButton\r\n      className={ selected ? 'selected' : '' }\r\n      onClick={() => {\r\n        const isSelected = !selected;\r\n\r\n        if (isSelected) {\r\n          setCurrentBoros(currentBoros.concat(boros.filter(x => x.name === children)[0].name))\r\n        }\r\n        else {\r\n          setCurrentBoros(currentBoros.filter(currentBoro => currentBoro !== children))\r\n        }\r\n      \r\n        setSelected(isSelected)\r\n       }}\r\n    >\r\n      {children}\r\n    </StyledButton>\r\n  )\r\n}\r\n\r\nconst Filter = ({ boros }) => {\r\n  const [currentBoros, setCurrentBoros] = useState([]);\r\n\r\n    return (\r\n    <>\r\n      <p>\r\n        Filter:\r\n        { ' ' }\r\n        { boros.map(boro =>\r\n          <Button\r\n            boros={boros}\r\n            currentBoros={currentBoros}\r\n            setCurrentBoros={setCurrentBoros}\r\n          >\r\n              {boro.name}\r\n          </Button>\r\n        )}\r\n      </p>\r\n      { currentBoros.length > 0 &&\r\n        <p>\r\n          Selected boros:\r\n          { ' ' }\r\n          { currentBoros.join(', ') }\r\n        </p>\r\n      }\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Filter;","import React from 'react';\nimport { MapContainer } from 'react-leaflet';\nimport 'leaflet-defaulticon-compatibility';\n\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css';\nimport './App.css';\n\nimport TileLayer from './components/TileLayer';\nimport ZipcodeLayer from './components/ZipcodeLayer';\nimport Leads from './components/LeadsLayer';\nimport Filter from './components/Filter';\nimport boros from './data/boros.json';\n\nfunction App() {\n  return (\n    <>\n      <div id=\"mapid\">\n        <MapContainer center={[40.705, -73.978]} zoom={10} zoomControl={true}>\n          <TileLayer />\n          <ZipcodeLayer />\n          <Leads />\n        </MapContainer>\n        <Filter boros={boros}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}